import{_ as s,c as e,o as i,ae as t}from"./chunks/framework.CSF8Tn1V.js";const c=JSON.parse('{"title":"Function: areValuesEqual()","description":"","frontmatter":{},"headers":[],"relativePath":"api/functions/areValuesEqual.md","filePath":"api/functions/areValuesEqual.md","lastUpdated":1755526574000}'),l={name:"api/functions/areValuesEqual.md"};function n(r,a,h,p,o,u){return i(),e("div",null,a[0]||(a[0]=[t(`<p><a href="./../README"><strong>vue-qs v0.1.18</strong></a></p><hr><p><a href="./../README">vue-qs</a> / areValuesEqual</p><h1 id="function-arevaluesequal" tabindex="-1">Function: areValuesEqual() <a class="header-anchor" href="#function-arevaluesequal" aria-label="Permalink to &quot;Function: areValuesEqual()&quot;">​</a></h1><blockquote><p><strong>areValuesEqual</strong>&lt;<code>T</code>&gt;(<code>valueA</code>, <code>valueB</code>, <code>customEquals?</code>): <code>boolean</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/bdb41c8152865a4fb600c24be642289b5d115cbf/src/utils/core-helpers.ts#L126" target="_blank" rel="noreferrer">utils/core-helpers.ts:126</a></p><p>Safely compares two values for equality</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h3><p><code>T</code></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="valuea" tabindex="-1">valueA <a class="header-anchor" href="#valuea" aria-label="Permalink to &quot;valueA&quot;">​</a></h3><p><code>T</code></p><p>First value to compare</p><h3 id="valueb" tabindex="-1">valueB <a class="header-anchor" href="#valueb" aria-label="Permalink to &quot;valueB&quot;">​</a></h3><p><code>T</code></p><p>Second value to compare</p><h3 id="customequals" tabindex="-1">customEquals? <a class="header-anchor" href="#customequals" aria-label="Permalink to &quot;customEquals?&quot;">​</a></h3><p>(<code>a</code>, <code>b</code>) =&gt; <code>boolean</code></p><p>Optional custom equality function</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>boolean</code></p><p>true if values are equal</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Default comparison</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">areValuesEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">areValuesEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, {}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false (different objects)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Custom comparison</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">areValuesEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.id) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div>`,25)]))}const k=s(l,[["render",n]]);export{c as __pageData,k as default};
