import{_ as e,c as r,o as t,ae as s}from"./chunks/framework.CSF8Tn1V.js";const u=JSON.parse('{"title":"Type Alias: Parser()<T>","description":"","frontmatter":{},"headers":[],"relativePath":"api/type-aliases/Parser.md","filePath":"api/type-aliases/Parser.md","lastUpdated":1754938284000}'),o={name:"api/type-aliases/Parser.md"};function l(i,a,p,d,n,c){return t(),r("div",null,a[0]||(a[0]=[s('<p><a href="./../README"><strong>vue-qs v0.1.7</strong></a></p><hr><p><a href="./../README">vue-qs</a> / Parser</p><h1 id="type-alias-parser-t" tabindex="-1">Type Alias: Parser()&lt;T&gt; <a class="header-anchor" href="#type-alias-parser-t" aria-label="Permalink to &quot;Type Alias: Parser()\\&lt;T\\&gt;&quot;">​</a></h1><blockquote><p><strong>Parser</strong>&lt;<code>T</code>&gt; = (<code>value</code>) =&gt; <code>T</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/db1176155e4718a70dabfdac1aacf43d04432436/src/types.ts#L4" target="_blank" rel="noreferrer">types.ts:4</a></p><p>Parses a raw query-string value into a typed value.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h3><p><code>T</code></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="value" tabindex="-1">value <a class="header-anchor" href="#value" aria-label="Permalink to &quot;value&quot;">​</a></h3><p><code>string</code> | <code>null</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>T</code></p>',15)]))}const m=e(o,[["render",l]]);export{u as __pageData,m as default};
