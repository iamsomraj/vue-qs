import{_ as a,c as s,o as t,ae as i}from"./chunks/framework.CSF8Tn1V.js";const u=JSON.parse('{"title":"Type Alias: QueryParameterOptions<T>","description":"","frontmatter":{},"headers":[],"relativePath":"api/type-aliases/QueryParameterOptions.md","filePath":"api/type-aliases/QueryParameterOptions.md","lastUpdated":1755526574000}'),r={name:"api/type-aliases/QueryParameterOptions.md"};function o(l,e,n,p,h,d){return t(),s("div",null,e[0]||(e[0]=[i(`<p><a href="./../README"><strong>vue-qs v0.1.18</strong></a></p><hr><p><a href="./../README">vue-qs</a> / QueryParameterOptions</p><h1 id="type-alias-queryparameteroptions-t" tabindex="-1">Type Alias: QueryParameterOptions&lt;T&gt; <a class="header-anchor" href="#type-alias-queryparameteroptions-t" aria-label="Permalink to &quot;Type Alias: QueryParameterOptions\\&lt;T\\&gt;&quot;">​</a></h1><blockquote><p><strong>QueryParameterOptions</strong>&lt;<code>T</code>&gt; = <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/bdb41c8152865a4fb600c24be642289b5d115cbf/src/types.ts#L64" target="_blank" rel="noreferrer">types.ts:64</a></p><p>Configuration options for a single query parameter</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pageOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QueryParameterOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  defaultValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  codec: numberCodec,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  shouldOmitDefault: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h3><p><code>T</code></p><p>The type of the parameter value</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="defaultvalue" tabindex="-1">defaultValue? <a class="header-anchor" href="#defaultvalue" aria-label="Permalink to &quot;defaultValue?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>defaultValue</strong>: <code>T</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/bdb41c8152865a4fb600c24be642289b5d115cbf/src/types.ts#L66" target="_blank" rel="noreferrer">types.ts:66</a></p><p>Default value to use when parameter is missing or invalid</p><hr><h3 id="codec" tabindex="-1">codec? <a class="header-anchor" href="#codec" aria-label="Permalink to &quot;codec?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>codec</strong>: <a href="./QueryCodec"><code>QueryCodec</code></a>&lt;<code>T</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/bdb41c8152865a4fb600c24be642289b5d115cbf/src/types.ts#L68" target="_blank" rel="noreferrer">types.ts:68</a></p><p>Combined codec with both parse and serialize functions</p><hr><h3 id="parse" tabindex="-1">parse? <a class="header-anchor" href="#parse" aria-label="Permalink to &quot;parse?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>parse</strong>: <a href="./QueryParser"><code>QueryParser</code></a>&lt;<code>T</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/bdb41c8152865a4fb600c24be642289b5d115cbf/src/types.ts#L70" target="_blank" rel="noreferrer">types.ts:70</a></p><p>Custom parser function (overrides codec.parse if provided)</p><hr><h3 id="serializefunction" tabindex="-1">serializeFunction? <a class="header-anchor" href="#serializefunction" aria-label="Permalink to &quot;serializeFunction?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>serializeFunction</strong>: <a href="./QuerySerializer"><code>QuerySerializer</code></a>&lt;<code>T</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/bdb41c8152865a4fb600c24be642289b5d115cbf/src/types.ts#L72" target="_blank" rel="noreferrer">types.ts:72</a></p><p>Custom serializer function (overrides codec.serialize if provided)</p><hr><h3 id="isequal" tabindex="-1">isEqual()? <a class="header-anchor" href="#isequal" aria-label="Permalink to &quot;isEqual()?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>isEqual</strong>: (<code>valueA</code>, <code>valueB</code>) =&gt; <code>boolean</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/bdb41c8152865a4fb600c24be642289b5d115cbf/src/types.ts#L74" target="_blank" rel="noreferrer">types.ts:74</a></p><p>Custom equality function to compare values (defaults to Object.is)</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="valuea" tabindex="-1">valueA <a class="header-anchor" href="#valuea" aria-label="Permalink to &quot;valueA&quot;">​</a></h5><p><code>T</code></p><h5 id="valueb" tabindex="-1">valueB <a class="header-anchor" href="#valueb" aria-label="Permalink to &quot;valueB&quot;">​</a></h5><p><code>T</code></p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>boolean</code></p><hr><h3 id="shouldomitdefault" tabindex="-1">shouldOmitDefault? <a class="header-anchor" href="#shouldomitdefault" aria-label="Permalink to &quot;shouldOmitDefault?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>shouldOmitDefault</strong>: <code>boolean</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/bdb41c8152865a4fb600c24be642289b5d115cbf/src/types.ts#L76" target="_blank" rel="noreferrer">types.ts:76</a></p><p>Whether to omit the parameter from URL when value equals default (default: true)</p>`,50)]))}const b=a(r,[["render",o]]);export{u as __pageData,b as default};
