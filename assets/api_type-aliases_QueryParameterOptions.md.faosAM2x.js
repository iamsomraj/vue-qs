import{_ as a,c as t,o as r,ae as o}from"./chunks/framework.CSF8Tn1V.js";const h=JSON.parse('{"title":"Type Alias: QueryParameterOptions<T>","description":"","frontmatter":{},"headers":[],"relativePath":"api/type-aliases/QueryParameterOptions.md","filePath":"api/type-aliases/QueryParameterOptions.md","lastUpdated":1755246450000}'),s={name:"api/type-aliases/QueryParameterOptions.md"};function i(l,e,n,d,c,p){return r(),t("div",null,e[0]||(e[0]=[o('<p><a href="./../README"><strong>vue-qs v0.1.16</strong></a></p><hr><p><a href="./../README">vue-qs</a> / QueryParameterOptions</p><h1 id="type-alias-queryparameteroptions-t" tabindex="-1">Type Alias: QueryParameterOptions&lt;T&gt; <a class="header-anchor" href="#type-alias-queryparameteroptions-t" aria-label="Permalink to &quot;Type Alias: QueryParameterOptions\\&lt;T\\&gt;&quot;">​</a></h1><blockquote><p><strong>QueryParameterOptions</strong>&lt;<code>T</code>&gt; = <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/e1f88d67026c08e56605a693106ef6b717bd39ad/src/types.ts#L34" target="_blank" rel="noreferrer">types.ts:34</a></p><p>Configuration options for a single query parameter</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h3><p><code>T</code></p><p>The type of the parameter value</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="defaultvalue" tabindex="-1">defaultValue? <a class="header-anchor" href="#defaultvalue" aria-label="Permalink to &quot;defaultValue?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>defaultValue</strong>: <code>T</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/e1f88d67026c08e56605a693106ef6b717bd39ad/src/types.ts#L36" target="_blank" rel="noreferrer">types.ts:36</a></p><p>Default value to use when parameter is missing or invalid</p><hr><h3 id="codec" tabindex="-1">codec? <a class="header-anchor" href="#codec" aria-label="Permalink to &quot;codec?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>codec</strong>: <a href="./QueryCodec"><code>QueryCodec</code></a>&lt;<code>T</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/e1f88d67026c08e56605a693106ef6b717bd39ad/src/types.ts#L38" target="_blank" rel="noreferrer">types.ts:38</a></p><p>Combined codec with both parse and serialize functions</p><hr><h3 id="parsefunction" tabindex="-1">parseFunction? <a class="header-anchor" href="#parsefunction" aria-label="Permalink to &quot;parseFunction?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>parseFunction</strong>: <a href="./QueryParser"><code>QueryParser</code></a>&lt;<code>T</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/e1f88d67026c08e56605a693106ef6b717bd39ad/src/types.ts#L40" target="_blank" rel="noreferrer">types.ts:40</a></p><p>Custom parser function (overrides codec.parse if provided)</p><hr><h3 id="serializefunction" tabindex="-1">serializeFunction? <a class="header-anchor" href="#serializefunction" aria-label="Permalink to &quot;serializeFunction?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>serializeFunction</strong>: <a href="./QuerySerializer"><code>QuerySerializer</code></a>&lt;<code>T</code>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/e1f88d67026c08e56605a693106ef6b717bd39ad/src/types.ts#L42" target="_blank" rel="noreferrer">types.ts:42</a></p><p>Custom serializer function (overrides codec.serialize if provided)</p><hr><h3 id="isequal" tabindex="-1">isEqual()? <a class="header-anchor" href="#isequal" aria-label="Permalink to &quot;isEqual()?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>isEqual</strong>: (<code>valueA</code>, <code>valueB</code>) =&gt; <code>boolean</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/e1f88d67026c08e56605a693106ef6b717bd39ad/src/types.ts#L44" target="_blank" rel="noreferrer">types.ts:44</a></p><p>Custom equality function to compare values (defaults to Object.is)</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="valuea" tabindex="-1">valueA <a class="header-anchor" href="#valuea" aria-label="Permalink to &quot;valueA&quot;">​</a></h5><p><code>T</code></p><h5 id="valueb" tabindex="-1">valueB <a class="header-anchor" href="#valueb" aria-label="Permalink to &quot;valueB&quot;">​</a></h5><p><code>T</code></p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>boolean</code></p><hr><h3 id="shouldomitdefault" tabindex="-1">shouldOmitDefault? <a class="header-anchor" href="#shouldomitdefault" aria-label="Permalink to &quot;shouldOmitDefault?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>shouldOmitDefault</strong>: <code>boolean</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/e1f88d67026c08e56605a693106ef6b717bd39ad/src/types.ts#L46" target="_blank" rel="noreferrer">types.ts:46</a></p><p>Whether to omit the parameter from URL when value equals default (default: true)</p><hr><h3 id="batchkey" tabindex="-1">batchKey? <a class="header-anchor" href="#batchkey" aria-label="Permalink to &quot;batchKey?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>batchKey</strong>: <code>string</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/e1f88d67026c08e56605a693106ef6b717bd39ad/src/types.ts#L48" target="_blank" rel="noreferrer">types.ts:48</a></p><p>Optional batch key for grouping parameter updates</p>',53)]))}const b=a(s,[["render",i]]);export{h as __pageData,b as default};
