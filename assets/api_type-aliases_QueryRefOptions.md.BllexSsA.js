import{_ as t,c as a,o as r,ae as o}from"./chunks/framework.CSF8Tn1V.js";const y=JSON.parse('{"title":"Type Alias: QueryRefOptions<T>","description":"","frontmatter":{},"headers":[],"relativePath":"api/type-aliases/QueryRefOptions.md","filePath":"api/type-aliases/QueryRefOptions.md","lastUpdated":1755320299000}'),p={name:"api/type-aliases/QueryRefOptions.md"};function s(i,e,n,c,l,d){return r(),a("div",null,e[0]||(e[0]=[o('<p><a href="./../README"><strong>vue-qs v0.1.17</strong></a></p><hr><p><a href="./../README">vue-qs</a> / QueryRefOptions</p><h1 id="type-alias-queryrefoptions-t" tabindex="-1">Type Alias: QueryRefOptions&lt;T&gt; <a class="header-anchor" href="#type-alias-queryrefoptions-t" aria-label="Permalink to &quot;Type Alias: QueryRefOptions\\&lt;T\\&gt;&quot;">​</a></h1><blockquote><p><strong>QueryRefOptions</strong>&lt;<code>T</code>&gt; = <a href="./QueryParameterOptions"><code>QueryParameterOptions</code></a>&lt;<code>T</code>&gt; &amp; <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/b89690c4cfcb78328e659968e3c7235730988be4/src/types.ts#L60" target="_blank" rel="noreferrer">types.ts:60</a></p><p>Options for queryRef composable</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="historystrategy" tabindex="-1">historyStrategy? <a class="header-anchor" href="#historystrategy" aria-label="Permalink to &quot;historyStrategy?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>historyStrategy</strong>: <code>&quot;replace&quot;</code> | <code>&quot;push&quot;</code></p></blockquote><p>History strategy when updating the URL (&#39;replace&#39; | &#39;push&#39;)</p><h3 id="queryadapter" tabindex="-1">queryAdapter? <a class="header-anchor" href="#queryadapter" aria-label="Permalink to &quot;queryAdapter?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>queryAdapter</strong>: <a href="./QueryAdapter"><code>QueryAdapter</code></a></p></blockquote><p>Optional custom query adapter to use</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h3><p><code>T</code></p><p>The type of the query parameter value</p>',18)]))}const h=t(p,[["render",s]]);export{y as __pageData,h as default};
