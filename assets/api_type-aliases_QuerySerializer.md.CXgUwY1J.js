import{_ as e,c as i,o as s,ae as t}from"./chunks/framework.CSF8Tn1V.js";const u=JSON.parse('{"title":"Type Alias: QuerySerializer()<T>","description":"","frontmatter":{},"headers":[],"relativePath":"api/type-aliases/QuerySerializer.md","filePath":"api/type-aliases/QuerySerializer.md","lastUpdated":1755526574000}'),r={name:"api/type-aliases/QuerySerializer.md"};function l(n,a,p,h,d,o){return s(),i("div",null,a[0]||(a[0]=[t(`<p><a href="./../README"><strong>vue-qs v0.1.18</strong></a></p><hr><p><a href="./../README">vue-qs</a> / QuerySerializer</p><h1 id="type-alias-queryserializer-t" tabindex="-1">Type Alias: QuerySerializer()&lt;T&gt; <a class="header-anchor" href="#type-alias-queryserializer-t" aria-label="Permalink to &quot;Type Alias: QuerySerializer()\\&lt;T\\&gt;&quot;">​</a></h1><blockquote><p><strong>QuerySerializer</strong>&lt;<code>T</code>&gt; = (<code>typedValue</code>) =&gt; <code>string</code> | <code>null</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/bdb41c8152865a4fb600c24be642289b5d115cbf/src/types.ts#L31" target="_blank" rel="noreferrer">types.ts:31</a></p><p>Function that serializes a typed value into a string for the URL query</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h3><p><code>T</code></p><p>The input type to serialize</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="typedvalue" tabindex="-1">typedValue <a class="header-anchor" href="#typedvalue" aria-label="Permalink to &quot;typedValue&quot;">​</a></h3><p><code>T</code></p><p>The typed value to serialize</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>string</code> | <code>null</code></p><p>The serialized string value, or null if the value should be omitted from the URL</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> numberSerializer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QuerySerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,20)]))}const c=e(r,[["render",l]]);export{u as __pageData,c as default};
