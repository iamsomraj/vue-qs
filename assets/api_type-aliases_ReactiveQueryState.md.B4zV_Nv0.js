import{_ as a,c as t,o as r,ae as s}from"./chunks/framework.CSF8Tn1V.js";const u=JSON.parse('{"title":"Type Alias: ReactiveQueryState<TSchema>","description":"","frontmatter":{},"headers":[],"relativePath":"api/type-aliases/ReactiveQueryState.md","filePath":"api/type-aliases/ReactiveQueryState.md","lastUpdated":null}'),c={name:"api/type-aliases/ReactiveQueryState.md"};function i(o,e,p,h,l,m){return r(),t("div",null,e[0]||(e[0]=[s('<p><a href="./../README"><strong>vue-qs v0.1.12</strong></a></p><hr><p><a href="./../README">vue-qs</a> / ReactiveQueryState</p><h1 id="type-alias-reactivequerystate-tschema" tabindex="-1">Type Alias: ReactiveQueryState&lt;TSchema&gt; <a class="header-anchor" href="#type-alias-reactivequerystate-tschema" aria-label="Permalink to &quot;Type Alias: ReactiveQueryState\\&lt;TSchema\\&gt;&quot;">​</a></h1><blockquote><p><strong>ReactiveQueryState</strong>&lt;<code>TSchema</code>&gt; = <code>{ [K in keyof TSchema]: TSchema[K] extends QueryParameterOptions&lt;infer T&gt; ? T : never }</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/25821b36b15a9ec7f33138992536e546f5649808/src/types.ts#L82" target="_blank" rel="noreferrer">types.ts:82</a></p><p>Reactive state object for useQueryReactive</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="tschema" tabindex="-1">TSchema <a class="header-anchor" href="#tschema" aria-label="Permalink to &quot;TSchema&quot;">​</a></h3><p><code>TSchema</code> <em>extends</em> <a href="./QueryParameterSchema"><code>QueryParameterSchema</code></a></p><p>The parameter schema type</p>',11)]))}const d=a(c,[["render",i]]);export{u as __pageData,d as default};
