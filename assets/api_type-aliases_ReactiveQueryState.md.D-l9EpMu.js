import{_ as e,c as s,o as t,ae as i}from"./chunks/framework.CSF8Tn1V.js";const o=JSON.parse('{"title":"Type Alias: ReactiveQueryState<TSchema>","description":"","frontmatter":{},"headers":[],"relativePath":"api/type-aliases/ReactiveQueryState.md","filePath":"api/type-aliases/ReactiveQueryState.md","lastUpdated":1755526574000}'),n={name:"api/type-aliases/ReactiveQueryState.md"};function p(h,a,r,l,c,k){return t(),s("div",null,a[0]||(a[0]=[i(`<p><a href="./../README"><strong>vue-qs v0.1.18</strong></a></p><hr><p><a href="./../README">vue-qs</a> / ReactiveQueryState</p><h1 id="type-alias-reactivequerystate-tschema" tabindex="-1">Type Alias: ReactiveQueryState&lt;TSchema&gt; <a class="header-anchor" href="#type-alias-reactivequerystate-tschema" aria-label="Permalink to &quot;Type Alias: ReactiveQueryState\\&lt;TSchema\\&gt;&quot;">​</a></h1><blockquote><p><strong>ReactiveQueryState</strong>&lt;<code>TSchema</code>&gt; = <code>{ [K in keyof TSchema]: TSchema[K] extends QueryParameterOptions&lt;infer T&gt; ? T : never }</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/bdb41c8152865a4fb600c24be642289b5d115cbf/src/types.ts#L132" target="_blank" rel="noreferrer">types.ts:132</a></p><p>Reactive state object for queryReactive</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="tschema" tabindex="-1">TSchema <a class="header-anchor" href="#tschema" aria-label="Permalink to &quot;TSchema&quot;">​</a></h3><p><code>TSchema</code> <em>extends</em> <a href="./QueryParameterSchema"><code>QueryParameterSchema</code></a></p><p>The parameter schema type</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  search: { defaultValue: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  page: { defaultValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReactiveQueryState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> schema&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// State = { search: string; page: number }</span></span></code></pre></div>`,13)]))}const y=e(n,[["render",p]]);export{o as __pageData,y as default};
