import{_ as a,c as t,o,ae as r}from"./chunks/framework.CSF8Tn1V.js";const y=JSON.parse('{"title":"Type Alias: UseQueryRefOptions<T>","description":"","frontmatter":{},"headers":[],"relativePath":"api/type-aliases/UseQueryRefOptions.md","filePath":"api/type-aliases/UseQueryRefOptions.md","lastUpdated":1755081649000}'),s={name:"api/type-aliases/UseQueryRefOptions.md"};function p(n,e,i,l,c,d){return o(),t("div",null,e[0]||(e[0]=[r('<p><a href="./../README"><strong>vue-qs v0.1.13</strong></a></p><hr><p><a href="./../README">vue-qs</a> / UseQueryRefOptions</p><h1 id="type-alias-usequeryrefoptions-t" tabindex="-1">Type Alias: UseQueryRefOptions&lt;T&gt; <a class="header-anchor" href="#type-alias-usequeryrefoptions-t" aria-label="Permalink to &quot;Type Alias: UseQueryRefOptions\\&lt;T\\&gt;&quot;">​</a></h1><blockquote><p><strong>UseQueryRefOptions</strong>&lt;<code>T</code>&gt; = <a href="./QueryParameterOptions"><code>QueryParameterOptions</code></a>&lt;<code>T</code>&gt; &amp; <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/a4643e0077390aa3ef25224e2e3a0792449f830c/src/types.ts#L60" target="_blank" rel="noreferrer">types.ts:60</a></p><p>Options for useQueryRef composable</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="historystrategy" tabindex="-1">historyStrategy? <a class="header-anchor" href="#historystrategy" aria-label="Permalink to &quot;historyStrategy?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>historyStrategy</strong>: <code>&quot;replace&quot;</code> | <code>&quot;push&quot;</code></p></blockquote><p>History strategy when updating the URL (&#39;replace&#39; | &#39;push&#39;)</p><h3 id="queryadapter" tabindex="-1">queryAdapter? <a class="header-anchor" href="#queryadapter" aria-label="Permalink to &quot;queryAdapter?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>queryAdapter</strong>: <a href="./QueryAdapter"><code>QueryAdapter</code></a></p></blockquote><p>Optional custom query adapter to use</p><h3 id="enabletwowaysync" tabindex="-1">enableTwoWaySync? <a class="header-anchor" href="#enabletwowaysync" aria-label="Permalink to &quot;enableTwoWaySync?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>enableTwoWaySync</strong>: <code>boolean</code></p></blockquote><p>Enable two-way synchronization with URL changes</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h3><p><code>T</code></p><p>The type of the query parameter value</p>',21)]))}const h=a(s,[["render",p]]);export{y as __pageData,h as default};
