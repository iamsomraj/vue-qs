import{_ as a,c as t,o,ae as r}from"./chunks/framework.CSF8Tn1V.js";const h=JSON.parse('{"title":"Type Alias: UseQueryRefOptions<T>","description":"","frontmatter":{},"headers":[],"relativePath":"api/type-aliases/UseQueryRefOptions.md","filePath":"api/type-aliases/UseQueryRefOptions.md","lastUpdated":1754938163000}'),s={name:"api/type-aliases/UseQueryRefOptions.md"};function p(i,e,l,n,d,c){return o(),t("div",null,e[0]||(e[0]=[r('<p><a href="./../README"><strong>vue-qs v0.1.7</strong></a></p><hr><p><a href="./../README">vue-qs</a> / UseQueryRefOptions</p><h1 id="type-alias-usequeryrefoptions-t" tabindex="-1">Type Alias: UseQueryRefOptions&lt;T&gt; <a class="header-anchor" href="#type-alias-usequeryrefoptions-t" aria-label="Permalink to &quot;Type Alias: UseQueryRefOptions\\&lt;T\\&gt;&quot;">​</a></h1><blockquote><p><strong>UseQueryRefOptions</strong>&lt;<code>T</code>&gt; = <a href="./ParamOption"><code>ParamOption</code></a>&lt;<code>T</code>&gt; &amp; <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/iamsomraj/vue-qs/blob/3914abe3b71638946c178175ac5cb09af4684d1b/src/types.ts#L37" target="_blank" rel="noreferrer">types.ts:37</a></p><p>Options for <a href="./../functions/useQueryRef">useQueryRef</a>.</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="history" tabindex="-1">history? <a class="header-anchor" href="#history" aria-label="Permalink to &quot;history?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>history</strong>: <code>&quot;replace&quot;</code> | <code>&quot;push&quot;</code></p></blockquote><p>History strategy when updating the URL</p><ul><li>&#39;replace&#39;: replaceState (default)</li><li>&#39;push&#39;: pushState</li></ul><h3 id="adapter" tabindex="-1">adapter? <a class="header-anchor" href="#adapter" aria-label="Permalink to &quot;adapter?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>adapter</strong>: <a href="./QueryAdapter"><code>QueryAdapter</code></a></p></blockquote><p>Optional adapter override (e.g., Vue Router adapter)</p><h3 id="twoway" tabindex="-1">twoWay? <a class="header-anchor" href="#twoway" aria-label="Permalink to &quot;twoWay?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>twoWay</strong>: <code>boolean</code></p></blockquote><p>If true, also listen to browser/router navigations and rehydrate the ref from the URL. Defaults to false</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h3><p><code>T</code></p>',21)]))}const y=a(s,[["render",p]]);export{h as __pageData,y as default};
