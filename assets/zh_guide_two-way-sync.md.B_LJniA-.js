import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.CSF8Tn1V.js";const c=JSON.parse('{"title":"双向同步","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/two-way-sync.md","filePath":"zh/guide/two-way-sync.md","lastUpdated":1754937236000}'),h={name:"zh/guide/two-way-sync.md"};function n(p,s,l,k,d,r){return t(),a("div",null,s[0]||(s[0]=[e('<h1 id="双向同步" tabindex="-1">双向同步 <a class="header-anchor" href="#双向同步" aria-label="Permalink to &quot;双向同步&quot;">​</a></h1><p>开启 URL -&gt; 状态 的同步，这样浏览器前进/后退或路由跳转会同步到状态。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useQueryRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;page&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, codec: serializers.number, twoWay: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><p>其原理：在 History API 适配器下监听 <code>popstate</code>，在 Vue Router 适配器下监听 <code>router.afterEach</code> 来回填状态。</p><p>对于多个参数：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useQueryReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(schema, { twoWay: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div>',6)]))}const g=i(h,[["render",n]]);export{c as __pageData,g as default};
